from datetime import datetime
import random
import time

class User:
    def __init__(self):
        self.last_ship = 0

users_cooldowns = {}
rp_actions = {
    "–æ–±–Ω—è—Ç—å": ["–Ω–µ–∂–Ω–æ –æ–±–Ω—è–ª(–∞)", "–∫—Ä–µ–ø–∫–æ –æ–±–Ω—è–ª(–∞)", "–∑–∞–∫–ª—é—á–∏–ª(–∞) –≤ –æ–±—ä—è—Ç–∏—è"],
    "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å": ["–Ω–µ–∂–Ω–æ –ø–æ—Ü–µ–ª–æ–≤–∞–ª(–∞)", "—Å—Ç—Ä–∞—Å—Ç–Ω–æ –ø–æ—Ü–µ–ª–æ–≤–∞–ª(–∞)", "–ø–æ–¥–∞—Ä–∏–ª(–∞) –ø–æ—Ü–µ–ª—É–π"],
    "—É–¥–∞—Ä–∏—Ç—å": ["—Å–∏–ª—å–Ω–æ —É–¥–∞—Ä–∏–ª(–∞)", "–¥–∞–ª(–∞) –ø–æ–¥–∑–∞—Ç—ã–ª—å–Ω–∏–∫", "—Å—Ç—É–∫–Ω—É–ª(–∞)"],
    "–ø–æ–≥–ª–∞–¥–∏—Ç—å": ["–Ω–µ–∂–Ω–æ –ø–æ–≥–ª–∞–¥–∏–ª(–∞)", "–ª–∞—Å–∫–æ–≤–æ –ø–æ–≥–ª–∞–¥–∏–ª(–∞)", "–ø–æ–≥–ª–∞–¥–∏–ª(–∞) –ø–æ –≥–æ–ª–æ–≤–µ"],
    "–ø–æ–∫–æ—Ä–º–∏—Ç—å": ["—É–≥–æ—Å—Ç–∏–ª(–∞) –≤–∫—É—Å–Ω—è—à–∫–æ–π", "–Ω–∞–∫–æ—Ä–º–∏–ª(–∞) –¥–æ –æ—Ç–≤–∞–ª–∞", "–ø–æ–¥–µ–ª–∏–ª—Å—è(–∞—Å—å) –µ–¥–æ–π"],
    "—É–∫—É—Å–∏—Ç—å": ["–ª–µ–≥–æ–Ω—å–∫–æ —É–∫—É—Å–∏–ª(–∞)", "—Å–¥–µ–ª–∞–ª(–∞) –∫—É—Å—å", "–∏–≥—Ä–∏–≤–æ —É–∫—É—Å–∏–ª(–∞)"],
    "–ø–æ–∂–∞—Ç—å —Ä—É–∫—É": ["–ø–æ–∂–∞–ª(–∞) —Ä—É–∫—É", "–∫—Ä–µ–ø–∫–æ –ø–æ–∂–∞–ª(–∞) —Ä—É–∫—É", "—Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–∂–∞–ª(–∞) —Ä—É–∫—É"],
    "–ø–æ—Ö–≤–∞–ª–∏—Ç—å": ["–ø–æ—Ö–≤–∞–ª–∏–ª(–∞)", "–æ—Ç–º–µ—Ç–∏–ª(–∞) —É—Å–ø–µ—Ö–∏", "–≤—ã—Ä–∞–∑–∏–ª(–∞) –≤–æ—Å—Ö–∏—â–µ–Ω–∏–µ"],
    "–Ω–∞–∫–∞–∑–∞—Ç—å": ["—Å—Ç—Ä–æ–≥–æ –Ω–∞–∫–∞–∑–∞–ª(–∞)", "–ø—Ä–µ–ø–æ–¥–∞–ª(–∞) —É—Ä–æ–∫", "–ø–æ–∫–∞–∑–∞–ª(–∞) –∫—Ç–æ –≥–ª–∞–≤–Ω—ã–π"],
    "–ø—Ä–∏–∂–∞—Ç—å": ["–Ω–µ–∂–Ω–æ –ø—Ä–∏–∂–∞–ª(–∞) –∫ —Å–µ–±–µ", "–∫—Ä–µ–ø–∫–æ –ø—Ä–∏–∂–∞–ª(–∞)", "—É—é—Ç–Ω–æ –ø—Ä–∏–∂–∞–ª(–∞)"]
}

ship_phrases = [
    "–õ—é–±–æ–≤—å –≤–∏—Ç–∞–µ—Ç –≤ –≤–æ–∑–¥—É—Ö–µ! üíï",
    "–ò–¥–µ–∞–ª—å–Ω–∞—è –ø–∞—Ä–∞! üíë",
    "–°—É–¥—å–±–∞ —Å–≤–µ–ª–∞ –∏—Ö –≤–º–µ—Å—Ç–µ! ‚ù§Ô∏è",
    "–ù–∞—Å—Ç–æ—è—â–∞—è –ª—é–±–æ–≤—å! üíò",
    "–°–æ–∑–¥–∞–Ω—ã –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞! üíñ"
]

members = ["User1", "User2", "User3", "User4", "User5"] # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

def process_command(text, user_id):
    if not text.startswith("?"): 
        return

    cmd = text[1:].split()
    if not cmd:
        return show_help()

    command = cmd[0].lower()

    if command == "help":
        return show_help()

    elif command == "—à–∏–ø":
        return ship_command(user_id)

    elif command in rp_actions:
        if len(cmd) < 2:
            return "[-] –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
        target = cmd[1]
        return rp_command(command, user_id, target)

    return f"[-] –ö–æ–º–∞–Ω–¥–∞ ?{command} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ ?help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."

def show_help():
    help_text = [
        "[!] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
        "",
        "[+] ?—à–∏–ø - –®–∏–ø–ø–µ—Ä–∏—Ç—å –¥–≤—É—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Ä–∞–∑ –≤ —á–∞—Å)",
        "[+] –†–ü –∫–æ–º–∞–Ω–¥—ã (–ü—Ä–∏–º–µ—Ä: ?–æ–±–Ω—è—Ç—å @user):"
    ]

    for cmd in rp_actions.keys():
        help_text.append(f"[+] ?{cmd}")

    return "\n".join(help_text)

def ship_command(user_id):
    if user_id not in users_cooldowns:
        users_cooldowns[user_id] = User()

    user = users_cooldowns[user_id]
    current_time = time.time()

    if current_time - user.last_ship < 3600:
        remaining = int(3600 - (current_time - user.last_ship))
        minutes = remaining // 60
        seconds = remaining % 60
        return f"[-] –ü–æ–¥–æ–∂–¥–∏—Ç–µ {minutes}–º {seconds}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —à–∏–ø–ø–µ—Ä–æ–º!"

    user.last_ship = current_time

    user1, user2 = random.sample(members, 2)
    phrase = random.choice(ship_phrases)

    return f"[+] {user1} + {user2} = {phrase}"

def rp_command(action, user_id, target):
    variation = random.choice(rp_actions[action])
    return f"[+] {user_id} {variation} {target}"

def main():
    print("[+] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (?help –¥–ª—è –ø–æ–º–æ—â–∏)")

    while True:
        try:
            text = input("\n[>] ").strip()
            if text.lower() == "exit":
                break

            if text:
                result = process_command(text, "TestUser")
                if result:
                    print(result)

        except KeyboardInterrupt:
            break
        except Exception as e:
            print(f"[-] –û—à–∏–±–∫–∞: {e}")

    print("\n[!] –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()
